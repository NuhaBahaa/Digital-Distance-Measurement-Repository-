
buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000546  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000546  000005ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000a80  00000000  00000000  000005d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000005b0  00000000  00000000  00001054  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 56 02 	call	0x4ac	; 0x4ac <main>
  7a:	0c 94 a1 02 	jmp	0x542	; 0x542 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Buzzer_voidRun>:
#include "Types.h"
#include "DIO_interface.h"
#include "Buzzer_Interface.h"

extern void Buzzer_voidRun(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	DIO_u8WritePinVal(DIO_u8PIN0,u8ONE);
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_u8WritePinVal>
}
  92:	cf 91       	pop	r28
  94:	df 91       	pop	r29
  96:	08 95       	ret

00000098 <Buzzer_voidStop>:

extern void Buzzer_voidStop(void)
{
  98:	df 93       	push	r29
  9a:	cf 93       	push	r28
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8WritePinVal(DIO_u8PIN0,u8ZERO);
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_u8WritePinVal>
}
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	08 95       	ret

000000ae <DIO_voidInit>:
static volatile u8* const DIO_u8DDRADD[DIO_u8PORTSIZE]={DIO_u8DDRA,DIO_u8DDRB,DIO_u8DDRC,DIO_u8DDRD};


/*Comment!: Initialization function */
void DIO_voidInit(void)
{
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	*DIO_u8DDRA=DIO_u8PORT0DIR;
  b6:	ea e3       	ldi	r30, 0x3A	; 58
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 83       	st	Z, r24
	*DIO_u8DDRB=DIO_u8PORT1DIR;
  be:	e7 e3       	ldi	r30, 0x37	; 55
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	80 83       	st	Z, r24
	*DIO_u8DDRC=DIO_u8PORT2DIR;
  c6:	e4 e3       	ldi	r30, 0x34	; 52
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	80 83       	st	Z, r24
	*DIO_u8DDRD=DIO_u8PORT3DIR;
  ce:	e1 e3       	ldi	r30, 0x31	; 49
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	80 83       	st	Z, r24

	*DIO_u8PORTA=(*DIO_u8PORTA & (~*DIO_u8DDRA)) | (DIO_u8PORT0DIR & DIO_u8PORT0INIT);
  d6:	ab e3       	ldi	r26, 0x3B	; 59
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	eb e3       	ldi	r30, 0x3B	; 59
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	98 2f       	mov	r25, r24
  e2:	ea e3       	ldi	r30, 0x3A	; 58
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 95       	com	r24
  ea:	89 23       	and	r24, r25
  ec:	8c 93       	st	X, r24
	*DIO_u8PORTB=(*DIO_u8PORTB & (~*DIO_u8DDRB)) | (DIO_u8PORT1DIR & DIO_u8PORT1INIT);
  ee:	a8 e3       	ldi	r26, 0x38	; 56
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	e8 e3       	ldi	r30, 0x38	; 56
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	98 2f       	mov	r25, r24
  fa:	e7 e3       	ldi	r30, 0x37	; 55
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	80 95       	com	r24
 102:	89 23       	and	r24, r25
 104:	8c 93       	st	X, r24
	*DIO_u8PORTC=(*DIO_u8PORTC & (~*DIO_u8DDRC)) | (DIO_u8PORT2DIR & DIO_u8PORT2INIT);
 106:	a5 e3       	ldi	r26, 0x35	; 53
 108:	b0 e0       	ldi	r27, 0x00	; 0
 10a:	e5 e3       	ldi	r30, 0x35	; 53
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	98 2f       	mov	r25, r24
 112:	e4 e3       	ldi	r30, 0x34	; 52
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	80 95       	com	r24
 11a:	89 23       	and	r24, r25
 11c:	8c 93       	st	X, r24
	*DIO_u8PORTD=(*DIO_u8PORTD & (~*DIO_u8DDRD)) | (DIO_u8PORT3DIR & DIO_u8PORT3INIT);
 11e:	a2 e3       	ldi	r26, 0x32	; 50
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	e2 e3       	ldi	r30, 0x32	; 50
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	98 2f       	mov	r25, r24
 12a:	e1 e3       	ldi	r30, 0x31	; 49
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 95       	com	r24
 132:	89 23       	and	r24, r25
 134:	8c 93       	st	X, r24

	return;
}
 136:	cf 91       	pop	r28
 138:	df 91       	pop	r29
 13a:	08 95       	ret

0000013c <DIO_u8ReadPortVal>:



/*Comment!: Read Port Value */
extern u8 DIO_u8ReadPortVal(u8 Copy_u8PortIdx,u8* Copy_u8PtrToVal)
{
 13c:	df 93       	push	r29
 13e:	cf 93       	push	r28
 140:	00 d0       	rcall	.+0      	; 0x142 <DIO_u8ReadPortVal+0x6>
 142:	00 d0       	rcall	.+0      	; 0x144 <DIO_u8ReadPortVal+0x8>
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
 148:	8a 83       	std	Y+2, r24	; 0x02
 14a:	7c 83       	std	Y+4, r23	; 0x04
 14c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Error=u8OK;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortIdx >= DIO_u8PORTSIZE)
 152:	8a 81       	ldd	r24, Y+2	; 0x02
 154:	84 30       	cpi	r24, 0x04	; 4
 156:	10 f0       	brcs	.+4      	; 0x15c <DIO_u8ReadPortVal+0x20>
	{
		Local_u8Error=u8ERROR;
 158:	19 82       	std	Y+1, r1	; 0x01
 15a:	0f c0       	rjmp	.+30     	; 0x17a <DIO_u8ReadPortVal+0x3e>
	}
	else
	{
		*Copy_u8PtrToVal=*(DIO_u8PINADD[Copy_u8PortIdx]);
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	88 2f       	mov	r24, r24
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	fc 01       	movw	r30, r24
 168:	e8 59       	subi	r30, 0x98	; 152
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	01 90       	ld	r0, Z+
 16e:	f0 81       	ld	r31, Z
 170:	e0 2d       	mov	r30, r0
 172:	80 81       	ld	r24, Z
 174:	eb 81       	ldd	r30, Y+3	; 0x03
 176:	fc 81       	ldd	r31, Y+4	; 0x04
 178:	80 83       	st	Z, r24
//		*Copy_u8PtrToVal=PIN3;
//		break;
//	default:
//		Local_u8Error=u8ERROR;
//	}
	return Local_u8Error;
 17a:	89 81       	ldd	r24, Y+1	; 0x01
}
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	cf 91       	pop	r28
 186:	df 91       	pop	r29
 188:	08 95       	ret

0000018a <DIO_u8WritePortVal>:


/*Comment!: Write Port Value */
extern u8 DIO_u8WritePortVal(u8 Copy_u8PortIdx,u8 Copy_u8PortVal)
{
 18a:	df 93       	push	r29
 18c:	cf 93       	push	r28
 18e:	00 d0       	rcall	.+0      	; 0x190 <DIO_u8WritePortVal+0x6>
 190:	0f 92       	push	r0
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	8a 83       	std	Y+2, r24	; 0x02
 198:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Error=u8OK;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortIdx>=DIO_u8PORTSIZE)
 19e:	8a 81       	ldd	r24, Y+2	; 0x02
 1a0:	84 30       	cpi	r24, 0x04	; 4
 1a2:	10 f0       	brcs	.+4      	; 0x1a8 <DIO_u8WritePortVal+0x1e>
		{
			Local_u8Error = u8ERROR;
 1a4:	19 82       	std	Y+1, r1	; 0x01
 1a6:	0d c0       	rjmp	.+26     	; 0x1c2 <DIO_u8WritePortVal+0x38>
		}
	else
		{
			*(DIO_u8PORTADD[Copy_u8PortIdx]) = Copy_u8PortVal;
 1a8:	8a 81       	ldd	r24, Y+2	; 0x02
 1aa:	88 2f       	mov	r24, r24
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	fc 01       	movw	r30, r24
 1b4:	e0 5a       	subi	r30, 0xA0	; 160
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	01 90       	ld	r0, Z+
 1ba:	f0 81       	ld	r31, Z
 1bc:	e0 2d       	mov	r30, r0
 1be:	8b 81       	ldd	r24, Y+3	; 0x03
 1c0:	80 83       	st	Z, r24
//			PORT3=Copy_u8PortVal;
//			break;
//		default:
//			Local_u8Error=u8ERROR;
//	}
	return Local_u8Error;
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
}
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	cf 91       	pop	r28
 1cc:	df 91       	pop	r29
 1ce:	08 95       	ret

000001d0 <DIO_u8ReadPinVal>:



/*Comment!: Read Pin Value */
extern u8 DIO_u8ReadPinVal(u8 Copy_u8PinIdx,u8* Copy_u8PtrToVal)
{
 1d0:	df 93       	push	r29
 1d2:	cf 93       	push	r28
 1d4:	00 d0       	rcall	.+0      	; 0x1d6 <DIO_u8ReadPinVal+0x6>
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <DIO_u8ReadPinVal+0x8>
 1d8:	00 d0       	rcall	.+0      	; 0x1da <DIO_u8ReadPinVal+0xa>
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	de b7       	in	r29, 0x3e	; 62
 1de:	8c 83       	std	Y+4, r24	; 0x04
 1e0:	7e 83       	std	Y+6, r23	; 0x06
 1e2:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Error=u8OK;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PinNum=Copy_u8PinIdx % DIO_u8PINPERPORT;
 1e8:	8c 81       	ldd	r24, Y+4	; 0x04
 1ea:	87 70       	andi	r24, 0x07	; 7
 1ec:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PortNum=(u8)(Copy_u8PinIdx / DIO_u8PINPERPORT);
 1ee:	8c 81       	ldd	r24, Y+4	; 0x04
 1f0:	86 95       	lsr	r24
 1f2:	86 95       	lsr	r24
 1f4:	86 95       	lsr	r24
 1f6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinIdx>=DIO_u8PINSIZE)
 1f8:	8c 81       	ldd	r24, Y+4	; 0x04
 1fa:	80 32       	cpi	r24, 0x20	; 32
 1fc:	10 f0       	brcs	.+4      	; 0x202 <DIO_u8ReadPinVal+0x32>
		{
			Local_u8Error = u8ERROR;
 1fe:	1b 82       	std	Y+3, r1	; 0x03
 200:	1c c0       	rjmp	.+56     	; 0x23a <DIO_u8ReadPinVal+0x6a>
		}
	else
		{
			*Copy_u8PtrToVal=GETBIT(*(DIO_u8PINADD[Local_u8PortNum]),Local_u8PinNum) ;
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	88 2f       	mov	r24, r24
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	fc 01       	movw	r30, r24
 20e:	e8 59       	subi	r30, 0x98	; 152
 210:	ff 4f       	sbci	r31, 0xFF	; 255
 212:	01 90       	ld	r0, Z+
 214:	f0 81       	ld	r31, Z
 216:	e0 2d       	mov	r30, r0
 218:	80 81       	ld	r24, Z
 21a:	28 2f       	mov	r18, r24
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	8a 81       	ldd	r24, Y+2	; 0x02
 220:	88 2f       	mov	r24, r24
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	a9 01       	movw	r20, r18
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_u8ReadPinVal+0x5c>
 228:	55 95       	asr	r21
 22a:	47 95       	ror	r20
 22c:	8a 95       	dec	r24
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_u8ReadPinVal+0x58>
 230:	ca 01       	movw	r24, r20
 232:	81 70       	andi	r24, 0x01	; 1
 234:	ed 81       	ldd	r30, Y+5	; 0x05
 236:	fe 81       	ldd	r31, Y+6	; 0x06
 238:	80 83       	st	Z, r24
//				*Copy_u8PtrToVal=GetBit(PIN3,Local_u8PinNum);
//				break;
//			default:
//				Local_u8Error=u8ERROR;
//		}
	return Local_u8Error;
 23a:	8b 81       	ldd	r24, Y+3	; 0x03
}
 23c:	26 96       	adiw	r28, 0x06	; 6
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
 248:	cf 91       	pop	r28
 24a:	df 91       	pop	r29
 24c:	08 95       	ret

0000024e <DIO_u8WritePinVal>:


/*Comment!: Write Pin Value */
extern u8 DIO_u8WritePinVal(u8 Copy_u8PinIdx,u8 Copy_u8PinVal)
{
 24e:	df 93       	push	r29
 250:	cf 93       	push	r28
 252:	00 d0       	rcall	.+0      	; 0x254 <DIO_u8WritePinVal+0x6>
 254:	00 d0       	rcall	.+0      	; 0x256 <DIO_u8WritePinVal+0x8>
 256:	0f 92       	push	r0
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
 25c:	8c 83       	std	Y+4, r24	; 0x04
 25e:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Error=u8OK;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PinNum=Copy_u8PinIdx % DIO_u8PINPERPORT;
 264:	8c 81       	ldd	r24, Y+4	; 0x04
 266:	87 70       	andi	r24, 0x07	; 7
 268:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PortNum=(u8)(Copy_u8PinIdx / DIO_u8PINPERPORT);
 26a:	8c 81       	ldd	r24, Y+4	; 0x04
 26c:	86 95       	lsr	r24
 26e:	86 95       	lsr	r24
 270:	86 95       	lsr	r24
 272:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinIdx>=DIO_u8PINSIZE)
 274:	8c 81       	ldd	r24, Y+4	; 0x04
 276:	80 32       	cpi	r24, 0x20	; 32
 278:	10 f0       	brcs	.+4      	; 0x27e <DIO_u8WritePinVal+0x30>
		{
			Local_u8Error = u8ERROR;
 27a:	1b 82       	std	Y+3, r1	; 0x03
 27c:	32 c0       	rjmp	.+100    	; 0x2e2 <DIO_u8WritePinVal+0x94>
		}
	else
		{
			ASSIGNBIT(*(DIO_u8PORTADD[Local_u8PortNum]),Local_u8PinNum,Copy_u8PinVal);
 27e:	89 81       	ldd	r24, Y+1	; 0x01
 280:	88 2f       	mov	r24, r24
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	fc 01       	movw	r30, r24
 28a:	e0 5a       	subi	r30, 0xA0	; 160
 28c:	ff 4f       	sbci	r31, 0xFF	; 255
 28e:	a0 81       	ld	r26, Z
 290:	b1 81       	ldd	r27, Z+1	; 0x01
 292:	89 81       	ldd	r24, Y+1	; 0x01
 294:	88 2f       	mov	r24, r24
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	fc 01       	movw	r30, r24
 29e:	e0 5a       	subi	r30, 0xA0	; 160
 2a0:	ff 4f       	sbci	r31, 0xFF	; 255
 2a2:	01 90       	ld	r0, Z+
 2a4:	f0 81       	ld	r31, Z
 2a6:	e0 2d       	mov	r30, r0
 2a8:	80 81       	ld	r24, Z
 2aa:	48 2f       	mov	r20, r24
 2ac:	8a 81       	ldd	r24, Y+2	; 0x02
 2ae:	28 2f       	mov	r18, r24
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_u8WritePinVal+0x6e>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	2a 95       	dec	r18
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_u8WritePinVal+0x6a>
 2c0:	80 95       	com	r24
 2c2:	48 23       	and	r20, r24
 2c4:	8d 81       	ldd	r24, Y+5	; 0x05
 2c6:	28 2f       	mov	r18, r24
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	88 2f       	mov	r24, r24
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	b9 01       	movw	r22, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_u8WritePinVal+0x8a>
 2d4:	66 0f       	add	r22, r22
 2d6:	77 1f       	adc	r23, r23
 2d8:	8a 95       	dec	r24
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_u8WritePinVal+0x86>
 2dc:	cb 01       	movw	r24, r22
 2de:	84 2b       	or	r24, r20
 2e0:	8c 93       	st	X, r24
//				AssignBit(PORT3,Local_u8PinNum,Copy_u8PinVal);
//				break;
//			default:
//				Local_u8Error=u8ERROR;
//		}
		return Local_u8Error;
 2e2:	8b 81       	ldd	r24, Y+3	; 0x03
}
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	0f 90       	pop	r0
 2ee:	cf 91       	pop	r28
 2f0:	df 91       	pop	r29
 2f2:	08 95       	ret

000002f4 <DIO_u8WritePinDir>:


/*Comment!: Write Pin Direction */
extern u8 DIO_u8WritePinDir(u8 Copy_u8PinIdx,u8 Copy_u8PinDir)
{
 2f4:	df 93       	push	r29
 2f6:	cf 93       	push	r28
 2f8:	00 d0       	rcall	.+0      	; 0x2fa <DIO_u8WritePinDir+0x6>
 2fa:	00 d0       	rcall	.+0      	; 0x2fc <DIO_u8WritePinDir+0x8>
 2fc:	0f 92       	push	r0
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
 302:	8c 83       	std	Y+4, r24	; 0x04
 304:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Error=u8OK;
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PinNum=Copy_u8PinIdx % DIO_u8PINPERPORT;
 30a:	8c 81       	ldd	r24, Y+4	; 0x04
 30c:	87 70       	andi	r24, 0x07	; 7
 30e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PortNum=(u8)(Copy_u8PinIdx / DIO_u8PINPERPORT);
 310:	8c 81       	ldd	r24, Y+4	; 0x04
 312:	86 95       	lsr	r24
 314:	86 95       	lsr	r24
 316:	86 95       	lsr	r24
 318:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinIdx>=DIO_u8PINSIZE)
 31a:	8c 81       	ldd	r24, Y+4	; 0x04
 31c:	80 32       	cpi	r24, 0x20	; 32
 31e:	10 f0       	brcs	.+4      	; 0x324 <DIO_u8WritePinDir+0x30>
		{
			Local_u8Error = u8ERROR;
 320:	1b 82       	std	Y+3, r1	; 0x03
 322:	32 c0       	rjmp	.+100    	; 0x388 <DIO_u8WritePinDir+0x94>
		}
	else
		{
			ASSIGNBIT(*(DIO_u8DDRADD[Local_u8PortNum]),Local_u8PinNum,Copy_u8PinDir);
 324:	89 81       	ldd	r24, Y+1	; 0x01
 326:	88 2f       	mov	r24, r24
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	fc 01       	movw	r30, r24
 330:	e0 59       	subi	r30, 0x90	; 144
 332:	ff 4f       	sbci	r31, 0xFF	; 255
 334:	a0 81       	ld	r26, Z
 336:	b1 81       	ldd	r27, Z+1	; 0x01
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	88 2f       	mov	r24, r24
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	fc 01       	movw	r30, r24
 344:	e0 59       	subi	r30, 0x90	; 144
 346:	ff 4f       	sbci	r31, 0xFF	; 255
 348:	01 90       	ld	r0, Z+
 34a:	f0 81       	ld	r31, Z
 34c:	e0 2d       	mov	r30, r0
 34e:	80 81       	ld	r24, Z
 350:	48 2f       	mov	r20, r24
 352:	8a 81       	ldd	r24, Y+2	; 0x02
 354:	28 2f       	mov	r18, r24
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_u8WritePinDir+0x6e>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	2a 95       	dec	r18
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_u8WritePinDir+0x6a>
 366:	80 95       	com	r24
 368:	48 23       	and	r20, r24
 36a:	8d 81       	ldd	r24, Y+5	; 0x05
 36c:	28 2f       	mov	r18, r24
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	8a 81       	ldd	r24, Y+2	; 0x02
 372:	88 2f       	mov	r24, r24
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	b9 01       	movw	r22, r18
 378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_u8WritePinDir+0x8a>
 37a:	66 0f       	add	r22, r22
 37c:	77 1f       	adc	r23, r23
 37e:	8a 95       	dec	r24
 380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_u8WritePinDir+0x86>
 382:	cb 01       	movw	r24, r22
 384:	84 2b       	or	r24, r20
 386:	8c 93       	st	X, r24
//					AssignBit(DDR3,Local_u8PinNum,Copy_u8PinDir);
//					break;
//				default:
//					Local_u8Error=u8ERROR;
//		}
	return Local_u8Error;
 388:	8b 81       	ldd	r24, Y+3	; 0x03
}
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	0f 90       	pop	r0
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	cf 91       	pop	r28
 396:	df 91       	pop	r29
 398:	08 95       	ret

0000039a <DIO_u8WritePortDir>:


/*Comment!: Write Port Direction */
extern u8 DIO_u8WritePortDir(u8 Copy_u8PortIdx,u8 Copy_u8PortDir)
{
 39a:	df 93       	push	r29
 39c:	cf 93       	push	r28
 39e:	00 d0       	rcall	.+0      	; 0x3a0 <DIO_u8WritePortDir+0x6>
 3a0:	0f 92       	push	r0
 3a2:	cd b7       	in	r28, 0x3d	; 61
 3a4:	de b7       	in	r29, 0x3e	; 62
 3a6:	8a 83       	std	Y+2, r24	; 0x02
 3a8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Error=u8OK;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortIdx>=DIO_u8PORTSIZE)
 3ae:	8a 81       	ldd	r24, Y+2	; 0x02
 3b0:	84 30       	cpi	r24, 0x04	; 4
 3b2:	10 f0       	brcs	.+4      	; 0x3b8 <DIO_u8WritePortDir+0x1e>
		{
			Local_u8Error = u8ERROR;
 3b4:	19 82       	std	Y+1, r1	; 0x01
 3b6:	0d c0       	rjmp	.+26     	; 0x3d2 <DIO_u8WritePortDir+0x38>
		}
	else
		{
			*(DIO_u8DDRADD[Copy_u8PortIdx]) = Copy_u8PortDir;
 3b8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ba:	88 2f       	mov	r24, r24
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	fc 01       	movw	r30, r24
 3c4:	e0 59       	subi	r30, 0x90	; 144
 3c6:	ff 4f       	sbci	r31, 0xFF	; 255
 3c8:	01 90       	ld	r0, Z+
 3ca:	f0 81       	ld	r31, Z
 3cc:	e0 2d       	mov	r30, r0
 3ce:	8b 81       	ldd	r24, Y+3	; 0x03
 3d0:	80 83       	st	Z, r24
//			DDR3=Copy_u8PortDir;
//			break;
//		default:
//			Local_u8Error=u8ERROR;
//	}
		return Local_u8Error;
 3d2:	89 81       	ldd	r24, Y+1	; 0x01
}
 3d4:	0f 90       	pop	r0
 3d6:	0f 90       	pop	r0
 3d8:	0f 90       	pop	r0
 3da:	cf 91       	pop	r28
 3dc:	df 91       	pop	r29
 3de:	08 95       	ret

000003e0 <DIO_u8ReadPinDir>:


/*Comment!: Read Pin Direction */
extern u8 DIO_u8ReadPinDir(u8 Copy_u8PinIdx,u8* Copy_u8PtrToDir)
{
 3e0:	df 93       	push	r29
 3e2:	cf 93       	push	r28
 3e4:	00 d0       	rcall	.+0      	; 0x3e6 <DIO_u8ReadPinDir+0x6>
 3e6:	00 d0       	rcall	.+0      	; 0x3e8 <DIO_u8ReadPinDir+0x8>
 3e8:	00 d0       	rcall	.+0      	; 0x3ea <DIO_u8ReadPinDir+0xa>
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62
 3ee:	8c 83       	std	Y+4, r24	; 0x04
 3f0:	7e 83       	std	Y+6, r23	; 0x06
 3f2:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Error=u8OK;
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PinNum=Copy_u8PinIdx % DIO_u8PINPERPORT;
 3f8:	8c 81       	ldd	r24, Y+4	; 0x04
 3fa:	87 70       	andi	r24, 0x07	; 7
 3fc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PortNum=(u8)(Copy_u8PinIdx / DIO_u8PINPERPORT);
 3fe:	8c 81       	ldd	r24, Y+4	; 0x04
 400:	86 95       	lsr	r24
 402:	86 95       	lsr	r24
 404:	86 95       	lsr	r24
 406:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinIdx>=DIO_u8PINSIZE)
 408:	8c 81       	ldd	r24, Y+4	; 0x04
 40a:	80 32       	cpi	r24, 0x20	; 32
 40c:	10 f0       	brcs	.+4      	; 0x412 <DIO_u8ReadPinDir+0x32>
		{
			Local_u8Error = u8ERROR;
 40e:	1b 82       	std	Y+3, r1	; 0x03
 410:	1c c0       	rjmp	.+56     	; 0x44a <DIO_u8ReadPinDir+0x6a>
		}
	else
		{
			*Copy_u8PtrToDir=GETBIT(*(DIO_u8DDRADD[Local_u8PortNum]),Local_u8PinNum) ;
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	88 2f       	mov	r24, r24
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	fc 01       	movw	r30, r24
 41e:	e0 59       	subi	r30, 0x90	; 144
 420:	ff 4f       	sbci	r31, 0xFF	; 255
 422:	01 90       	ld	r0, Z+
 424:	f0 81       	ld	r31, Z
 426:	e0 2d       	mov	r30, r0
 428:	80 81       	ld	r24, Z
 42a:	28 2f       	mov	r18, r24
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	8a 81       	ldd	r24, Y+2	; 0x02
 430:	88 2f       	mov	r24, r24
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	a9 01       	movw	r20, r18
 436:	02 c0       	rjmp	.+4      	; 0x43c <DIO_u8ReadPinDir+0x5c>
 438:	55 95       	asr	r21
 43a:	47 95       	ror	r20
 43c:	8a 95       	dec	r24
 43e:	e2 f7       	brpl	.-8      	; 0x438 <DIO_u8ReadPinDir+0x58>
 440:	ca 01       	movw	r24, r20
 442:	81 70       	andi	r24, 0x01	; 1
 444:	ed 81       	ldd	r30, Y+5	; 0x05
 446:	fe 81       	ldd	r31, Y+6	; 0x06
 448:	80 83       	st	Z, r24
//			*Copy_u8PtrToDir=GetBit(DDR3,Local_u8PinNum);
//			break;
//		default:
//			Local_u8Error=u8ERROR;
//	}
	return Local_u8Error;
 44a:	8b 81       	ldd	r24, Y+3	; 0x03
}
 44c:	26 96       	adiw	r28, 0x06	; 6
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	f8 94       	cli
 452:	de bf       	out	0x3e, r29	; 62
 454:	0f be       	out	0x3f, r0	; 63
 456:	cd bf       	out	0x3d, r28	; 61
 458:	cf 91       	pop	r28
 45a:	df 91       	pop	r29
 45c:	08 95       	ret

0000045e <DIO_u8ReadPortDir>:


/*Comment!: Read Port Direction */
extern u8 DIO_u8ReadPortDir(u8 Copy_u8PortIdx,u8* Copy_u8PtrToDir)
{
 45e:	df 93       	push	r29
 460:	cf 93       	push	r28
 462:	00 d0       	rcall	.+0      	; 0x464 <__stack+0x5>
 464:	00 d0       	rcall	.+0      	; 0x466 <__stack+0x7>
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
 46a:	8a 83       	std	Y+2, r24	; 0x02
 46c:	7c 83       	std	Y+4, r23	; 0x04
 46e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Error=u8OK;
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortIdx >= DIO_u8PORTSIZE)
 474:	8a 81       	ldd	r24, Y+2	; 0x02
 476:	84 30       	cpi	r24, 0x04	; 4
 478:	10 f0       	brcs	.+4      	; 0x47e <__stack+0x1f>
		{
			Local_u8Error=u8ERROR;
 47a:	19 82       	std	Y+1, r1	; 0x01
 47c:	0f c0       	rjmp	.+30     	; 0x49c <__stack+0x3d>
		}
	else
		{
			*Copy_u8PtrToDir=*(DIO_u8DDRADD[Copy_u8PortIdx]);
 47e:	8a 81       	ldd	r24, Y+2	; 0x02
 480:	88 2f       	mov	r24, r24
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	fc 01       	movw	r30, r24
 48a:	e0 59       	subi	r30, 0x90	; 144
 48c:	ff 4f       	sbci	r31, 0xFF	; 255
 48e:	01 90       	ld	r0, Z+
 490:	f0 81       	ld	r31, Z
 492:	e0 2d       	mov	r30, r0
 494:	80 81       	ld	r24, Z
 496:	eb 81       	ldd	r30, Y+3	; 0x03
 498:	fc 81       	ldd	r31, Y+4	; 0x04
 49a:	80 83       	st	Z, r24
//				*Copy_u8PtrToDir=DDR3;
//				break;
//			default:
//				Local_u8Error=u8ERROR;
//		}
	return Local_u8Error;
 49c:	89 81       	ldd	r24, Y+1	; 0x01
}
 49e:	0f 90       	pop	r0
 4a0:	0f 90       	pop	r0
 4a2:	0f 90       	pop	r0
 4a4:	0f 90       	pop	r0
 4a6:	cf 91       	pop	r28
 4a8:	df 91       	pop	r29
 4aa:	08 95       	ret

000004ac <main>:
#include "DIO_interface.h"
#include "Buzzer_Interface.h"
#include "Delay.h"

int main (void)
{
 4ac:	df 93       	push	r29
 4ae:	cf 93       	push	r28
 4b0:	cd b7       	in	r28, 0x3d	; 61
 4b2:	de b7       	in	r29, 0x3e	; 62
 4b4:	28 97       	sbiw	r28, 0x08	; 8
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	f8 94       	cli
 4ba:	de bf       	out	0x3e, r29	; 62
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
 4c0:	0e 94 57 00 	call	0xae	; 0xae <DIO_voidInit>
	while(1)
	{
		Buzzer_voidRun();
 4c4:	0e 94 41 00 	call	0x82	; 0x82 <Buzzer_voidRun>
		DELAY_voidDELAY(500);
 4c8:	80 e5       	ldi	r24, 0x50	; 80
 4ca:	93 ec       	ldi	r25, 0xC3	; 195
 4cc:	a0 e0       	ldi	r26, 0x00	; 0
 4ce:	b0 e0       	ldi	r27, 0x00	; 0
 4d0:	8d 83       	std	Y+5, r24	; 0x05
 4d2:	9e 83       	std	Y+6, r25	; 0x06
 4d4:	af 83       	std	Y+7, r26	; 0x07
 4d6:	b8 87       	std	Y+8, r27	; 0x08
 4d8:	0c c0       	rjmp	.+24     	; 0x4f2 <main+0x46>
 4da:	00 00       	nop
 4dc:	8d 81       	ldd	r24, Y+5	; 0x05
 4de:	9e 81       	ldd	r25, Y+6	; 0x06
 4e0:	af 81       	ldd	r26, Y+7	; 0x07
 4e2:	b8 85       	ldd	r27, Y+8	; 0x08
 4e4:	01 97       	sbiw	r24, 0x01	; 1
 4e6:	a1 09       	sbc	r26, r1
 4e8:	b1 09       	sbc	r27, r1
 4ea:	8d 83       	std	Y+5, r24	; 0x05
 4ec:	9e 83       	std	Y+6, r25	; 0x06
 4ee:	af 83       	std	Y+7, r26	; 0x07
 4f0:	b8 87       	std	Y+8, r27	; 0x08
 4f2:	8d 81       	ldd	r24, Y+5	; 0x05
 4f4:	9e 81       	ldd	r25, Y+6	; 0x06
 4f6:	af 81       	ldd	r26, Y+7	; 0x07
 4f8:	b8 85       	ldd	r27, Y+8	; 0x08
 4fa:	00 97       	sbiw	r24, 0x00	; 0
 4fc:	a1 05       	cpc	r26, r1
 4fe:	b1 05       	cpc	r27, r1
 500:	61 f7       	brne	.-40     	; 0x4da <main+0x2e>
		Buzzer_voidStop();
 502:	0e 94 4c 00 	call	0x98	; 0x98 <Buzzer_voidStop>
		DELAY_voidDELAY(500);
 506:	80 e5       	ldi	r24, 0x50	; 80
 508:	93 ec       	ldi	r25, 0xC3	; 195
 50a:	a0 e0       	ldi	r26, 0x00	; 0
 50c:	b0 e0       	ldi	r27, 0x00	; 0
 50e:	89 83       	std	Y+1, r24	; 0x01
 510:	9a 83       	std	Y+2, r25	; 0x02
 512:	ab 83       	std	Y+3, r26	; 0x03
 514:	bc 83       	std	Y+4, r27	; 0x04
 516:	0c c0       	rjmp	.+24     	; 0x530 <main+0x84>
 518:	00 00       	nop
 51a:	89 81       	ldd	r24, Y+1	; 0x01
 51c:	9a 81       	ldd	r25, Y+2	; 0x02
 51e:	ab 81       	ldd	r26, Y+3	; 0x03
 520:	bc 81       	ldd	r27, Y+4	; 0x04
 522:	01 97       	sbiw	r24, 0x01	; 1
 524:	a1 09       	sbc	r26, r1
 526:	b1 09       	sbc	r27, r1
 528:	89 83       	std	Y+1, r24	; 0x01
 52a:	9a 83       	std	Y+2, r25	; 0x02
 52c:	ab 83       	std	Y+3, r26	; 0x03
 52e:	bc 83       	std	Y+4, r27	; 0x04
 530:	89 81       	ldd	r24, Y+1	; 0x01
 532:	9a 81       	ldd	r25, Y+2	; 0x02
 534:	ab 81       	ldd	r26, Y+3	; 0x03
 536:	bc 81       	ldd	r27, Y+4	; 0x04
 538:	00 97       	sbiw	r24, 0x00	; 0
 53a:	a1 05       	cpc	r26, r1
 53c:	b1 05       	cpc	r27, r1
 53e:	61 f7       	brne	.-40     	; 0x518 <main+0x6c>
 540:	c1 cf       	rjmp	.-126    	; 0x4c4 <main+0x18>

00000542 <_exit>:
 542:	f8 94       	cli

00000544 <__stop_program>:
 544:	ff cf       	rjmp	.-2      	; 0x544 <__stop_program>
